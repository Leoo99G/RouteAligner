import pandas as pd

# This script contains two functions:
# - standard_to_dataframe()
# - actual_to_dataframe()
#
# These two functions take as input the standard routes or
# actual routes generated by the function *generate_random_routes*
# (they are lists of dictionaries) and turn them into pandas dataframes.


def standard_to_dataframe(standard_routes):
    """
    :param standard_routes: list of dictionaries containing standard routes
    (output of the function *generate_random_routes*)
    :return: pandas dataframe containing standard routes
    """

    # Create an empty list to store DataFrames
    route_dfs = []

    # Step 1: Identify all unique merchandise types
    unique_merchandise_types = set()
    for row in standard_routes:
        for trip in row['route']:
            unique_merchandise_types.update(trip['merchandise'].keys())

    # Iterate through the data and create a DataFrame for each "route" dictionary
    for row in standard_routes:
        route_data = row['route']
        route_df = pd.DataFrame(route_data)

        # Step 2: Create new columns for each merchandise type
        for merch_type in unique_merchandise_types:
            route_df[merch_type] = 0  # Initialize all values to 0

        # Step 3: Populate the new columns with merchandise quantities
        for trip in route_data:
            for merch_type, merch_quantity in trip['merchandise'].items():
                # Update the corresponding column for the merchandise type
                route_df.at[route_data.index(trip), merch_type] = merch_quantity

        # Add column 'route_id' with the corresponding route ID
        route_df['route_id'] = row['id']

        route_dfs.append(route_df)

    # Concatenate the list of DataFrames into a single DataFrame
    combined_route_df = pd.concat(route_dfs, ignore_index=True)

    # # Move the "route_id" column to the first position
    # id_column = combined_route_df.pop("route_id")
    # combined_route_df.insert(0, "route_id", id_column)

    # Remove the column merchandise since I have all information
    # axis = 1 indicates I'm referring to a column
    combined_route_df = combined_route_df.drop('merchandise', axis=1)

    return combined_route_df


def actual_to_dataframe(actual_routes):
    """
    :param actual_routes: list of dictionaries containing standard routes
    (output of the function *generate_random_routes*)
    :return: pandas dataframe containing actual routes
    """

    # Create an empty list to store DataFrames
    route_dfs = []

    # Step 1: Identify all unique merchandise types
    unique_merchandise_types = set()
    for row in actual_routes:
        for trip in row['route']:
            unique_merchandise_types.update(trip['merchandise'].keys())

    # Iterate through the data and create a DataFrame for each "route" dictionary
    for row in actual_routes:
        route_data = row['route']
        route_df = pd.DataFrame(route_data)

        # Step 2: Create new columns for each merchandise type
        for merch_type in unique_merchandise_types:
            route_df[merch_type] = 0  # Initialize all values to 0

        # Step 3: Populate the new columns with merchandise quantities
        for trip in route_data:
            for merch_type, merch_quantity in trip['merchandise'].items():
                # Update the corresponding column for the merchandise type
                route_df.at[route_data.index(trip), merch_type] = merch_quantity

        # Add column 'route_id' with the corresponding route ID
        route_df['route_id'] = row['id']

        # Add column 'sroute' with the corresponding standard route ID
        route_df['sroute'] = row['sroute']

        # Add column 'driver' with the corresponding driver ID
        route_df['driver'] = row['driver']

        route_dfs.append(route_df)

    # Concatenate the list of DataFrames into a single DataFrame
    combined_route_df = pd.concat(route_dfs, ignore_index=True)

    # Remove the column merchandise since I have all information
    # axis = 1 indicates I'm referring to a column
    combined_route_df = combined_route_df.drop('merchandise', axis=1)

    return combined_route_df
